#!/usr/bin/env bash

# This is a comment in bash. The line above is actually a meta code
# that tells bash how to run this script. It allows you to set the
# file as executable (chmod +x ./script) and run the script file
# like it's a regular binary application.


# Declare variables. the quotations are optional and can be single quotes
# or double quotes. If you don't use quotations, you'll need to 'escape'
# meta stuff like like backslashes used in newlines and stuff like that.
# Also, there should be NO SPACE before and after the '=' sign.
VAR_ONE="value\n"    #
VAR_TWO='value\n'
VAR_THREE=value\\n

# When variables are referenced, a $ should
# be placed in front of the variable
echo This is VAR_ONE: $VAR_ONE, VAR_TWO: $VAR_TWO, VAR_THREE: $VAR_THREE


echo  # -------------------------------


# Check out a manual for echo: https://ss64.com/bash/echo.html
# echo doesn't parse meta characters like \n (newline), but automatically
# adds a newline to the output unless you pass the -n command line flag.
# to get echo to parse meta characters like \n (newline), add the command
# command line flag -e.
echo $VAR_ONE       # doesn't parse meta like \n (newline) but adds a newline to output.
echo $VAR_TWO       # doesn't parse meta like \n (newline) but adds a newline to output.
echo $VAR_THREE     # doesn't parse meta like \n (newline) but adds a newline to output.


echo  # -------------------------------


echo -e $VAR_ONE    # does parse meta like \n (newline) and adds a newline to output.
echo -e $VAR_TWO    # does parse meta like \n (newline) and adds a newline to output.
echo -e $VAR_THREE  # does parse meta like \n (newline) and adds a newline to output.


echo  # -------------------------------


echo -n $VAR_ONE    # doesn't parse meta like \n (newline) and doesn't add a newline to output.
echo -n $VAR_TWO    # doesn't parse meta like \n (newline) and doesn't add a newline to output.
echo -n $VAR_THREE  # doesn't parse meta like \n (newline) and doesn't add a newline to output.


echo  # -------------------------------


# check out a manual for printf: https://ss64.com/bash/printf.html
# printf allows for specific  formatting and DOES
# interpret met characters line newline (\n)
printf $VAR_ONE     # does parse meta like \n (newline) and doesn't add a newline to output.
printf $VAR_TWO     # does parse meta like \n (newline) and doesn't add a newline to output.
printf $VAR_THREE   # does parse meta like \n (newline) and doesn't add a newline to output.
